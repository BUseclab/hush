% This is the initial sinks and sources used for the first pass

<com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.Class)> -> _SINK_
<com.google.gson.Gson: java.lang.Object fromJson(java.io.Reader,java.lang.Class)> -> _SINK_
<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)> -> _SINK_

%Jackson XML
%<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(byte[],java.lang.Class)> -> _SINK_
%<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.io.InputStream,java.lang.Class)> -> _SINK_
%<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.io.Reader,java.lang.Class)> -> _SINK_
%<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)> -> _SINK_

%Flexjson
%<flexjson: java.lang.Object deserialize(java.io.Reader, java.lang.Class)> -> _SINK_
%<flexjson: java.lang.Object deserialize(java.io.Reader, java.lang.String, java.lang.Class)> -> _SINK_
%<flexjson: java.lang.Object deserialize(java.lang.String, java.lang.Class)> -> _SINK_
%<flexjson: java.lang.Object deserialize(java.lang.String, java.lang.String, java.lang.Class)> -> _SINK_

%<flexjson: flexjson.JSONDeserializer use(java.lang.Class, flexjson.ObjectFactory)> -> _SINK_
%<flexjson: flexjson.JSONDeserializer use(java.lang.String, java.lang.Class)> -> _SINK_

% Http libraries
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
<java.net.URLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
<org.apache.http.HttpEntity: java.io.InputStream getContent()> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SOURCE_
<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_
<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)> -> _SOURCE_
<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity,java.lang.String)> -> _SOURCE_
<org.apache.http.util.EntityUtils: java.lang.String getContentCharSet(org.apache.http.HttpEntity)> -> _SOURCE_


%OkHTTP
<com.squareup.okhttp.ResponseBody: java.lang.String string()> -> _SOURCE_
<com.squareup.okhttp.Call: com.squareup.okhttp.Response execute()> -> _SOURCE_ 

